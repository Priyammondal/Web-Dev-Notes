1. 1. Conditional Branching
The if(...) statement evaluates a condition in parentheses and, 
if the result is true, executes a block of code.
The if (…) statement evaluates the expression in its parentheses and converts 
the result to a boolean.
----------------------------------------------------------------
The if statement may contain an optional else block. 
It executes when the condition is falsy.

let year = prompt('In which year was the ECMAScript-2015 specification published?', '');

if (year == 2015) {
  alert( 'You guessed it right!' );
} else {
  alert( 'How can you be so wrong?' ); // any value except 2015
}
----------------------------------------------------------------
Sometimes, we’d like to test several variants of a condition. 
The else if clause lets us do that.

let year = prompt('In which year was the ECMAScript-2015 specification published?', '');

if (year < 2015) {
  alert( 'Too early...' );
} else if (year > 2015) {
  alert( 'Too late' );
} else {
  alert( 'Exactly!' );
}
----------------------------------------------------------------

2. Conditional Operator

Sometimes, we need to assign a variable depending on a condition.
let accessAllowed;
let age = prompt('How old are you?', '');

if (age > 18) {
  accessAllowed = true;
} else {
  accessAllowed = false;
}

alert(accessAllowed);

The so-called “conditional” or “question mark” operator lets us do 
that in a shorter and simpler way.

The operator is represented by a question mark ?. 
Sometimes it’s called “ternary”, because the operator has three operands. 
It is actually the one and only operator in JavaScript which has that many.

let result = condition ? value1 : value2;
The condition is evaluated: if it’s truthy then value1 is returned, 
otherwise – value2.

let accessAllowed = age > 18 ? true : false;

Multiple ‘?’

let age = prompt('age?', 18);

let message = (age < 3) ? 'Hi, baby!' :
  (age < 18) ? 'Hello!' :
  (age < 100) ? 'Greetings!' :
  'What an unusual age!';

alert( message );

----------------------------------------------------------------

3. Logical Operators

There are four logical operators in JavaScript: || (OR), && (AND), ! (NOT), ?? (Nullish Coalescing).

|| (OR)

logical OR is meant to manipulate boolean values only. If any of its 
arguments are true, it returns true, otherwise it returns false.

let hour = 9;

if (hour < 10 || hour > 18) {
  alert( 'The office is closed.' );
}

We can pass more conditions:

let hour = 12;
let isWeekend = true;

if (hour < 10 || hour > 18 || isWeekend) {
  alert( 'The office is closed.' ); // it is the weekend
}
----------------------------------------------------------------
result = value1 || value2 || value3;

OR "||" finds the first truthy value

Evaluates operands from left to right.

For each operand, converts it to boolean. If the result is true, 
stops and returns the original value of that operand.

If all operands have been evaluated (i.e. all were false), 
returns the last operand.

alert( 1 || 0 ); // 1 (1 is truthy)

alert( null || 1 ); // 1 (1 is the first truthy value)
alert( null || 0 || 1 ); // 1 (the first truthy value)

alert( undefined || null || 0 ); // 0 (all falsy, returns the last value)

----------------------------------------------------------------
Another feature of OR || operator is the so-called “short-circuit” evaluation.

It means that || processes its arguments until the first truthy value is reached, 
and then the value is returned immediately, without even touching the other argument.

----------------------------------------------------------------
&& (AND)

Returns true if both operands are truthy and false otherwise

AND “&&” finds the first falsy value

result = value1 && value2 && value3;

Evaluates operands from left to right.

For each operand, converts it to a boolean. If the result is false, 
stops and returns the original value of that operand.

If all operands have been evaluated (i.e. all were truthy), 
returns the last operand.

// if the first operand is truthy,
// AND returns the second operand:
alert( 1 && 0 ); // 0
alert( 1 && 5 ); // 5

// if the first operand is falsy,
// AND returns it. The second operand is ignored
alert( null && 5 ); // null
alert( 0 && "no matter what" ); // 0
alert( 1 && 2 && null && 3 ); // null
alert( 1 && 2 && 3 ); // 3, the last one

----------------------------------------------------------------
The precedence of AND && operator is higher than OR ||.
So the code a && b || c && d is essentially the same as if 
the && expressions were in parentheses: (a && b) || (c && d).
----------------------------------------------------------------

! (NOT)

The boolean NOT operator is represented with an exclamation sign !.
result = !value;
Converts the operand to boolean type: true/false.
Returns the inverse value.

alert( !true ); // false
alert( !0 ); // true
alert( !!"non-empty string" ); // true
alert( !!null ); // false
----------------------------------------------------------------

Nullish coalescing operator '??'

The nullish coalescing operator is written as two question marks ??.
This operator checks for both the null and the undefined

The result of a ?? b is:

if a is neither null or undefined, then a,
if a is either null or undefined, then b.

Due to safety reasons, JavaScript forbids using ?? 
together with && and || operators, unless the precedence is 
explicitly specified with parentheses.

let x = 1 && 2 ?? 3; // Syntax error

let x = (1 && 2) ?? 3; // Works

alert(x); // 2

----------------------------------------------------------------

4. Loops

Loops are a way to repeat the same code multiple times.
Basic loops : while, do..while and for(..;..;..)

while (condition) {
  // code
  // so-called "loop body"
}

While the condition is truthy, the code from the loop body is executed.

If the loop body has a single statement, we can omit the curly braces {…}:

let i = 3;
while (i) alert(i--);

----------------------------------------------------------------
The condition check can be moved below the loop body using the do..while

do {
  // loop body
} while (condition);
The loop will first execute the body, then check the condition, and, while it’s truthy, 
execute it again and again.

This form of syntax should only be used when you want the body of the 
loop to execute at least once regardless of the condition being truthy. 

----------------------------------------------------------------

The for loop is more complex, but it’s also the most commonly used loop.
for (begin; condition; step) {
  // ... loop body ...
}

for (let i = 0; i < 3; i++) { // shows 0, then 1, then 2
  alert(i);
}

General Looping algorithm

Run begin
→ (if condition → run body and run step)
→ (if condition → run body and run step)
→ (if condition → run body and run step)
→ ...

----------------------------------------------------------------

Any part of for can be skipped.

For example, we can omit begin if we don’t need to do anything at the loop start.

let i = 0; // we have i already declared and assigned

for (; i < 3; i++) { // no need for "begin"
  alert( i ); // 0, 1, 2
}

----------------------------------------------------------------
We can also remove the step part:

let i = 0;

for (; i < 3;) {
  alert( i++ );
}
This makes the loop identical to while (i < 3).

--------------------------------
We can actually remove everything, creating an infinite loop:

for (;;) {
  // repeats without limits
}
Please note that the two for semicolons ; must be present. 
Otherwise, there would be a syntax error.

----------------------------------------------------------------

Normally, a loop exits when its condition becomes falsy.

But we can force the exit at any time using the special break directive.

#break
-------

let sum = 0;

while (true) {

  let value = +prompt("Enter a number", '');

  // if the user enters an empty line or cancels the input. 
  // It stops the loop immediately, passing control to the first 
  // line after the loop. Namely, alert.
  
  if (!value) break;
  sum += value;

}
alert( 'Sum: ' + sum );

#continue
----------

for (let i = 0; i < 10; i++) {

  // if true, skip the remaining part of the body
  // basically skipping the current iteration
  if (i % 2 == 0) continue;

  alert(i); // 1, then 3, 5, 7, 9
}


----------------------------------------------------------------

Please note that syntax constructs that are not expressions 
cannot be used with the ternary operator ?. In particular, 
directives such as break/continue aren’t allowed there.

For example, if we take this code:

if (i > 5) {
  alert(i);
} else {
  continue;
}
…and rewrite it using a question mark:

(i > 5) ? alert(i) : continue; // continue isn't allowed here
…it stops working: there’s a syntax error.

This is just another reason not to use the question mark operator ? instead of if.

