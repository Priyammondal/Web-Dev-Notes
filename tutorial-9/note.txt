## Object references and copying

One of the fundamental differences of objects versus primitives 
is that objects are stored and copied “by reference”, whereas 
primitive values: strings, numbers, booleans, etc – are always copied 
“as a whole value”.

let message = "Hello!";
let phrase = message;

As a result we have two independent variables, each one storing the string "Hello!".

Objects are not like that.
A variable assigned to an object stores not the object itself, 
but its “address in memory” – in other words “a reference” to it.

let user = {
  name: "John"
};

The object is stored somewhere in memory, while the user variable 
has a “reference” to it.

When an object variable is copied, the reference is copied, 
but the object itself is not duplicated.

let user = { name: "John" };

let admin = user; // copy the reference

Now we have two variables, each storing a reference to the same object

let user = { name: 'John' };
let admin = user;

admin.name = 'Pete'; // changed by the "admin" reference

alert(user.name); // 'Pete', changes are seen from the "user" reference

----------------------------------------------------------------

## Comparison by reference

Two objects are equal only if they are the same object

let a = {};
let b = a; // copy the reference

alert( a == b ); // true, both variables reference the same object
alert( a === b ); // true

And here two independent objects are not equal, even though they look alike (both are empty)

let a = {};
let b = {}; // two independent objects

alert( a == b ); // false

--------------------------------

## clonin Objects 

So, copying an object variable creates one more reference to the same object.
But what if we need to duplicate an object? There are few ways to do this!

1. Iteratively copying

let user = {
  name: "John",
  age: 30
};

let clone = {}; // the new empty object

// let's copy all user properties into it
for (let key in user) {
  clone[key] = user[key];
}

// now clone is a fully independent object with the same content
clone.name = "Pete"; // changed the data in it

alert( user.name ); // still John in the original object 

----------------------------------------------------------------

2. using Object.assign

let user = { name: "John" };

let permissions1 = { canView: true };
let permissions2 = { canEdit: true };

// copies all properties from permissions1 and permissions2 into user
Object.assign(user, permissions1, permissions2);

// now user = { name: "John", canView: true, canEdit: true }
alert(user.name); // John
alert(user.canView); // true
alert(user.canEdit); // true

----------------------------------------------------------------

3. using ES6 spread operator

let user = {
  name: "John",
  age: 30
};

let clone = {...user}; // now clone is a fully independent object with the same content

----------------------------------------------------------------

4. Nested cloning

Until now we assumed that all properties of user are primitive. 
But properties can be references to other objects.

let user = {
  name: "John",
  sizes: {
    height: 182,
    width: 50
  }
};

alert( user.sizes.height ); // 182

Now it’s not enough to copy clone.sizes = user.sizes, because user.sizes 
is an object, and will be copied by reference, 
so clone and user will share the same sizes

let user = {
  name: "John",
  sizes: {
    height: 182,
    width: 50
  }
};

let clone = Object.assign({}, user);

alert( user.sizes === clone.sizes ); // true, same object

// user and clone share sizes
user.sizes.width = 60;    // change a property from one place
alert(clone.sizes.width); // 60, get the result from the other one

## structuredClone

The call structuredClone(object) clones the object with all nested properties.

let user = {
  name: "John",
  sizes: {
    height: 182,
    width: 50
  }
};

let clone = structuredClone(user);

alert( user.sizes === clone.sizes ); // false, different objects

// user and clone are totally unrelated now
user.sizes.width = 60;    // change a property from one place
alert(clone.sizes.width); // 50, not related

----------------------------------------------------------------


