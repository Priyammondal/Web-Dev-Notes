"switch" statement

A switch statement can replace multiple if checks.

switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}

The value of x is checked for a strict equality to the value from the first case (that is, value1) then to the second (value2) and so on.

If the equality is found, switch starts to execute the code starting from the corresponding case, until the nearest break (or until the end of switch).

If no case is matched then the default code is executed (if it exists).

----------------------------------------------------------------

example1:

let a = 2 + 2;

switch (a) {
  case 3:
    alert( 'Too small' );
    break;
  case 4:
    alert( 'Exactly!' );
    break;
  case 5:
    alert( 'Too big' );
    break;
  default:
    alert( "I don't know such values" );
}

Here the switch starts to compare a from the first case variant that is 3. The match fails.

Then 4. That’s a match, so the execution starts from case 4 until the nearest break.

If there is no break then the execution continues with the next case without any checks.

----------------------------------------------------------------

Grouping of “case”

Several variants of case which share the same code can be grouped.

For example, if we want the same code to run for case 3 and case 5:

let a = 3;

switch (a) {
  case 4:
    alert('Right!');
    break;

  case 3: // (*) grouped two cases
  case 5:
    alert('Wrong!');
    alert("Why don't you take a math class?");
    break;

  default:
    alert('The result is strange. Really.');
}

----------------------------------------------------------------
----------------------------------------------------------------

Functions

Quite often we need to perform a similar action in many places of the script.
They allow the code to be called many times without repetition.

1. Function Declaration / Named function

function showMessage() {
  alert( 'Hello everyone!' );
}

// calling the function by its name
showMessage();

----------------------------------------------------------------
2. Anonymous function

An anonymous function is a function without a name. It is usually defined as an expression and often used as a callback function or assigned to a variable.

const multiply = function(a, b) {
  return a * b;
};

----------------------------------------------------------------

3. Arrow Functions:

Arrow functions provide a shorter syntax for creating functions. They are always anonymous and have a more concise syntax compared to traditional functions. 

const divide = (a, b) => a / b;

----------------------------------------------------------------

4. Higher order Function

A function that takes another function as a parameter or return a function as result is called HOF.

function operation(add, num1, num2) { // operation is HOF
  let result = add(num1, num2);
  console.log("result: ", result);
}
function add(a, b) {
  return a + b;
}
operation(add, 7, 5);


----------------------------------------------------------------

5. First-class Functions:

In a language with first-class functions, functions are treated as first-class citizens, just like any other data type. This means functions can be assigned to variables, passed as arguments to other functions, returned from functions, and stored in data structures like arrays or objects.

const add = function (a, b) {
  return a + b;
};

const result = add(2, 3); // result will be 5

const mathOperation = add; // assigning the function to another variable
const result2 = mathOperation(4, 5); // result2 will be 9

----------------------------------------------------------------
6. Pure Functions:

A pure function is a function that always produces the same output for the same input and has no side effects. In other words, a pure function does not modify the external state or interact with the outside world. Given the same input, a pure function will consistently return the same output, making it predictable and easy to reason about.

function square(number) {
  return number * number;
}

const result = square(4); // result will be 16

----------------------------------------------------------------
7. Impure Functions:

An impure function is a function that may produce different results for the same input or have side effects like modifying external state or interacting with the outside world (e.g., changing global variables, making API calls, modifying files)

let total = 0;

function addToTotal(number) {
  total += number; // Modifying external state (total)
  return total;
}

const result1 = addToTotal(5); // result1 will be 5
const result2 = addToTotal(3); // result2 will be 8 (total was modified by the previous call)

----------------------------------------------------------------
8. Callback Functions:

A callback function is a function passed as an argument to another function and executed after the completion of that function.

function fetchData(url, callback) {
  // Code to fetch data from the URL
  // Once data is fetched, call the callback function
  callback(data);
}

function processData(data) {
  // Code to process the fetched data
}

fetchData('https://example.com/data', processData);

----------------------------------------------------------------

9. Immediately Invoked Function Expressions (IIFE):

An IIFE is a function that is executed immediately after it is defined. It is typically used to create a private scope and avoid polluting the global namespace.

(function() {
  // Code here is executed immediately
})();


----------------------------------------------------------------

10. Constructor Functions:


----------------------------------------------------------------

11. Generator Functions:



