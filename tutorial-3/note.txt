In JavaScript there are 2 types of datatypes

1. Primitive (only single value can be stored and of one single type)
There are of total 7 primitive datatypes are in js.

## number ##

It could be an integer value or it could be a floating value.
let n = 45;
let x = 34.67;

Besides regular numbers, there are so-called “special numeric values” which also 
belong to this data type: Infinity, -Infinity and NaN.

Infinity represents the mathematical Infinity ∞. It is a special value that’s 
greater than any number.

We can get it as a result of division by zero:

alert( 1 / 0 ); // Infinity

NaN represents a computational error. It is a result of an incorrect or an undefined 
mathematical operation

alert( "not a number" / 2 ); // NaN, such division is erroneous

NaN is sticky. Any further mathematical operation on NaN returns NaN:

alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "not a number" / 2 - 1 ); // NaN

So, if there’s a NaN somewhere in a mathematical expression, it propagates to the whole result 
(there’s only one exception to that: NaN ** 0 is 1).

## BigInt ##

In JavaScript, the “number” type cannot safely represent integer values larger than 
(253-1) (that’s 9007199254740991), or less than -(253-1) for negatives.

For most purposes ±(253-1) range is quite enough, but sometimes we need the entire 
range of really big integers, e.g. for cryptography or microsecond-precision timestamps.

BigInt type was recently added to the language to represent integers of arbitrary length.

A BigInt value is created by appending n to the end of an integer:

// the "n" at the end means it's a BigInt
const bigInt = 1234567890123456789012345678901234567890n;

## String ##

A string in JavaScript must be surrounded by quotes.
In JavaScript, there are 3 types of quotes.

Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.

Double and single quotes are “simple” quotes. There’s practically 
no difference between them in JavaScript.

Backticks are “extended functionality” quotes. They allow us to embed 
variables and expressions into a string by wrapping them in ${…}

let name = "John";

// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!

// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3

## Boolean ##

The boolean type has only two values: true and false.

let nameFieldChecked = true; // yes, name field is checked
let ageFieldChecked = false; // no, age field is not checked

## null ##

Intentional absense of data.

let age = null;

In JavaScript, null is not a “reference to a non-existing object” or 
a “null pointer” like in some other languages.

It’s just a special value which represents “nothing”, “empty” or “value unknown”.

The code above states that age is unknown.

## undefined ##

The meaning of undefined is “value is not assigned”.

If a variable is declared, but not assigned, then its value is undefined

let age;
alert(age); // shows "undefined"

Technically, it is possible to explicitly assign undefined to a variable:

age = undefined;
alert(age); // "undefined"

But it is not recommended.
Normally, one uses null to assign an “empty” or “unknown” value to a variable, 
while undefined is reserved as a default initial value for unassigned things.

## symbol ##

The symbol type is used to create unique identifiers for objects.
let id = Symbol("id")


## objects ##

The object type is special.

All other types are called “primitive” because their values can contain 
only a single thing (be it a string or a number or whatever). 
In contrast, objects are used to store collections of data and more complex entities.
let userInfo = {
    "name" : "Ramesh",
    "age" : 24,
    "getOccupation" : function(){
        console.log("Ramesh is an Software Developer");
    }
}

----------------------------------------------------------------
----------------------------------------------------------------


---> The typeof operator returns the type of the operand.

typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"
typeof alert // "function"

typeof null // "object" --> why??? null is primitive datatype, 
so why then type is object and not null?
this is an error in the language, it’s not actually an object. and 
it is not being corrected because of compatibility issues.


----------------------------------------------------------------
Type Conversions

1. Implicit conversions

JS is a dynamic language means data types of the variables can change during the runtime;
Js determines data types depending on the value assigned.

let value = true; // boolean
value = 45; // now it is converted to a number
value = 45n // now it is converted to a bigInt
value = "sde" // now it is converted to a string

2. explicit conversions

There are also cases when we need to explicitly convert a value to the expected type.

## string conversion

let value = true; // boolean
value = String(value) // "true" -> now it is converted to a string

## numeric conversion

let value1 = "6" // string
value1 = Number(value1) // now it is converted to a number

undefined -> NaN
null -> 0
true and false -> 1 and 0
string	Whitespaces (includes spaces, tabs \t, newlines \n etc.) 
from the start and end are removed. 
If the remaining string is empty, the result is 0. 
Otherwise, the number is “read” from the string. An error gives NaN.

## boolean conversion

let value2 = "false" // string
value2 = Boolean(value2) // now it is converted to a boolean

Values that are intuitively “empty”, like 0, an empty string, null, undefined, and NaN, become false.
Other values become true.



